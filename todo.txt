=================
=== DEBATABLE ===

* compile-time substitutions:
  right now there is no way to mutate a variable
  using its value
  { x 10 } => x = 10
  but how to make it 9 or 11?
  it is related to some kind of "value copy"
  or assignment by value (now only by name)

* soft (shy) definitions:
  if the definition is marked in a special way,
  check if the symbol already holds an
  implementation, if it has, do not redefine word.
  can be useful for:
  1) nested words which will be evaluated only once
  2) for the "default" actions

* what is considered as false value?
  it is vital, because `!' operator must know whenever
  the arguments are true or false to invert them

============
=== MUST ===

* recursion is simply implemented at this moment,
  but this way is not scaling well with high amounts
  of recursive calls (10 000+ already pretty slow).

* name clashes are the real problem.
  something is surely needed, but I am not sure about namespaces.

=============
=== FIXME ===

* write e4.ffi-lambda-binding.
  it is needed by big loop setting mappings
  for call-with-arity function

* write wrapper for getting top and pushing at stack,
  because _most_ of lambdas take one top element (or several),
  then push their into stack

* check if it is possible when we collect tokens for compiled word
  to put them reversed order (to avoid nreverse call at the end).
  if it is, check the results (measure runtime)

* if endif is omitted, many strange things may happen!

* implementation of multiple similar concepts lead to some code
  duplication. 
